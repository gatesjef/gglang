// Vec2.gg

struct vec2 {
  f32 x;
  f32 y;
}

//TODO float literals
//vec2 V20 = V2(0,0);
//vec2 V21 = V2(1,1);
//Vec2 V2X = V2(1,0);
//Vec2 V2Y = V2(0,1);

vec2 V2(f32 x, f32 y) {
  vec2 retval; // = UNDEFINED;
  retval.x = x;
  retval.y = y;
  return retval;
}

//bool operator ==(const Vec2& v1, const Vec2& v2);
//bool operator !=(const Vec2& v1, const Vec2& v2);
//void operator +=(Vec2& v1, const Vec2& v2);
//Vec2 operator +(const Vec2& v1, const Vec2& v2);
//void operator -=(Vec2& v1, const Vec2& v2);
//Vec2 operator -(const Vec2& v1, const Vec2& v2);
//void operator *=(Vec2& v, float f);
//Vec2 operator *(const Vec2& v, float f);
//void operator /=(Vec2& v, float f); 
//Vec2 operator /(const Vec2& v, float f);
//Vec2 operator -(const Vec2& v);
//Vec2 operator*(float f, const Vec2& v);
//Vec2 MulEl2(const Vec2& v0, const Vec2& v1);
//Vec2 MulEl2(const Vec2I& v0, const Vec2& v1);
//Vec2 MulEl2(const Vec2& v0, const Vec2I& v1);
//Vec2 DivEl2(const Vec2& v0, const Vec2& v1);
//
//float Dot(const Vec2& v0,const Vec2& v1);
//float SqrLen(const Vec2& v0);
//float Len(const Vec2& v0);
//float SqrDist(const Vec2& v0, const Vec2& v1);
//float Dist(const Vec2& v0, const Vec2& v1);
//float Dist2D(float x1, float y1, float x2, float y2);
//Vec2 Norm(const Vec2& v0);
//Vec2 Norm_Safe(const Vec2& v0);
//Vec2 Perp(const Vec2& v);
//float Cross2(const Vec2 &a, const Vec2 &b);
//bool RangeContains(const Vec2 &r, float p);
//void RangeInflate(Vec2 &v, float p);
//Vec2 RangeIntersect(const Vec2 &r0, const Vec2 &r1);
//Vec2 RangeUnion(const Vec2 &r0, const Vec2 &r1);
//Vec2 Lerp(const Vec2& v1, const Vec2& v2, float t);