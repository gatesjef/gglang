// tests.gg

void local_variables() {
  i32 x = 10;
}


type void {}
type bool = llvm { u8 };

type i8   = llvm_type { i8 };
type i16  = llvm_type { i16 };
type i32  = llvm_type { i32 };
type i64  = llvm_type { i64 };
type i128 = llvm_type { i128 };

type f16  = llvm_type { half };
type f32  = llvm_type { float };
type f64  = llvm_type { double };
type f128 = llvm_type { ?? };

type u8   = llvm_type { i8 };

void local_variables() {
  i32 x = 10;
  i32 y = x;
  i32 z;
  z = y;
  y = z;
  //error { c = a; } // undefined

  bool a = true;
  //error { a = z; } // type mismatch
}  

void global_variables() {
}

void print() {
}

void casts() {
}

void pointers() {
  u8 x = 10;

  u8 *a = null;
  u8 *b = a;
  u8 *c = &x;
  u8 ** d = &b;
  u8 ** e = null;
  u8 *f = a + 1;
  f++;
}

void expressions() {
  i32 a;
  i32 b = 1;
  i32 c = -1;
  i32 d = 1-1;
  i32 e = 1+1;
  i32 f = 1*1;
  i32 g = div(1, 1);
  i32 h = rem(1, 1);

  i32 b1 = b;
  i32 c1 = -b;
  i32 d1 = b-1;
  i32 e1 = b+1;
  i32 f1 = b*1;
  i32 g1 = div(b, 1);
  i32 h1 = rem(b, 1);

  u8  hh;
  u8  i = 1 << 1;
  u8  j = 1 >> 1;
  u8  k = 1 & 1;
  u8  l = 1 | 1;
  u8  m = 1 ^ 1;
  u8  n = ~1;

  u8  i1 = i << 1;
  u8  j1 = i >> 1;
  u8  k1 = i & 1;
  u8  l1 = i | 1;
  u8  m1 = i ^ 1;
  u8  n1 = ~i;
}

void integers() {
  i8  w = 8;
  i16 x = 16;
  i32 y = 32;
  i64 z = 64;
  i128 n = 128;
}

void floats() {
  f16 a = 1/16;
  f16 b = 1.16;
  f32 c = 1/32;
  f32 d = 1.32;
  f64 e = 1/64;
  f64 f = 1.64;
}

void arrays() {
  i32[10] a;
  i32[10] b = {1,2,3};
  i32[10] c = b;
  i32[10] d;
  d = b;

  i32 x = b[9];
  b[9] = 10;
  b[1] = b[2];
  b[1] = b[1];

  //error {i32 y = b[99];}
  i32 z = b[|10|];
}


struct string {
  u8[]   data;
  u8[..] memory;
}

i64 strlen(string s) {
  return data.length-1;
}

i64 strcat(string s0, string s1) {
  string retval;
  retval.alloc(s0.length + s1.length + 1);
  *retval.data = s0.data;
  *(retval.data + s0.length - 1) = s1.data;
}


string operator(string s) {
  string retval;
  retval.data = s
}

i64 strlen_utf(string s) {
  // ...
}


void strings() {
 string a = "Hello";
 string b = a;
 string c = concat(a, b);
 i32 l = length(a);
 string d = substring(b,5,1);
 a[2] = "X";

}

void functions() {
}

void structs() {
}

void ifs() {
}

void fors() {
}

void expressions() {
}

void operators() {
}


void tests() {
  local_variables();
  global_variables();
  structs();
  functions();
  expressions();
  ifs();
  fors();
  operators();
}
