// int.gg

// i32
llvm_type i32 { 
  i32 
}

i32 operator +(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = add $a, $b
  }
  return x;
}

i32 operator -(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = sub $a, $b
  }
  return x;
}

i32 operator *(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = mul $a, $b
  }
  return x;
}

i32 operator /(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = sdiv $a, $b
  }
  return x;
}

i32 operator %(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = srem $a, $b
  }
  return x;
}

i32 operator -(i32 a) {
  return 0-a;
}

bool operator ==(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp eq $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

bool operator !=(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp ne $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

bool operator <(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp slt $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

bool operator <=(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp sle $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

bool operator >(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp sgt $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

bool operator >=(i32 a, i32 b) {
  bool retval; 
  llvm {
    %cmp_result = icmp sge $a, $b
    $retval = sext i1 %cmp_result to i8
  }
  return retval;
}

