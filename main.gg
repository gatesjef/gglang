///////////////////////////
// main.gg
// Hello comments!


//statement for(void init, bool check, void increment) {
//  init;
//  while(check) {
//    ingrement
//  }
//}

statement label(identifier lbl) {
  llvm {
    br label %$lbl
    $lbl:
  }
}

statement goto(identifier lbl) {
  llvm {
    br label %$lbl
    end_goto:
  }
}

i32 hex = 0xFF00ff00;
i32 hex2 = 0Xa;

statement if (bool if_check) then_clause {
  bool result = if_check;
  llvm {
    %i1# = trunc $result to i1
    br i1 %i1#, label %Then#, label %Else#
    Then#:
  }

  then_clause;

  llvm {
    br label %Resume#
    Else#:
  }

  //yield elseClause;

  llvm {
    br label %Resume#
    Resume#:
  }
}

statement while(bool while_check) while_clause {
  label(LOOP) {}
  bool while_result = while_check;
  if (while_result) {
    while_clause;
    goto(LOOP) {}
  }
}
//
//statement for(statement init, bool check, statement update) {
//  init;
//  while(check) {
//    yield;
//    update;
//  }
//}
//

void test_while() {
  i32 x = 0;
  while(x < 10) {
    printf("while %d\n", x);
    x = x + 1;
  }
}

import "prelude.gg";


void test_strcmp() {
  i32 x = strcmp("hi", "there");
  printf("strcmp(hi, there) : %d\n", x);

  i32 y = strcmp("hi", "hi");
  printf("strcmp(hi, hi) : %d\n", y);
}

void test_if() {
  printf("pre if-true\n");
  if (true) {
    printf("true!\n");
  }
  printf("post if-true\n");

  printf("pre if-false\n");
  if (false) {
    printf("false!\n");
  }
  printf("post if-false\n");

  printf("pre if-true again\n");
  if (true) {
    printf("true!\n");
  }
  printf("post if-true again\n");
}

//void test_goto_raw() {
//  llvm {
//    br label %test
//test:
//    br label %test
//end_goto:
//  }
//}


i32 test_goto() {
  i32 x = 0;
  label(START) {}
  if (x == 10) {
    return 10;
  }
  printf("repeat\n");
  x = x + 1;
  goto(START) {}
  return 20;
}


i32 a_constant = 1+1;

struct AStruct {
  i32 a_field;
  i32 another_field;
}

void test_struct() {
  AStruct a_struct;
  a_struct.a_field = 20;
  a_struct.another_field = 30;

  i32* a_struct_ptr = &a_struct.another_field;
  *a_struct_ptr += a_struct.a_field;

  printf("a_struct: %d, %d - %d\n", a_struct.a_field, a_struct.another_field, *a_struct_ptr);
}

void test_printf() {
  char *fmt = "A var string: %s\n";
  char *str = "varstring";
  printf(fmt, str);
  
  printf("Hello world!\n");

  printf("An int: %d\n", 22);
  i32 n = 44;
  printf("Another int: %d\n", n);

  // from the c++ printf page
  //printf ("Characters: %c %c \n", 'a', 65);
  printf ("Decimals: %d %ld\n", 2, 1977435);
  printf ("Preceding with blanks: %10d \n", 1977);
  printf ("Preceding with zeros: %010d \n", 1977);
  printf ("Some different radices: %d %x %o %#x %#o \n", 100, 100, 100, 100, 100);
  printf ("floats: %4.2f %+.0e %E \n", 3.1416, 3.1416, 3.1416);
  printf ("Width trick: %*d \n", 5, 10);
  printf ("%s \n", "A string");
}

i32 a_function() {
  return 43;
}

i32 another_function() {
  return a_function();
}

void a_void_function() {
}

i32 test_functions() {
  a_void_function();
  a_function();
  return another_function();
}

i32 test_i32() {
  i32 t;
  i32 u = 10;
  i32 v = -4;
  i32 w = u * v;
  i32 x = a_function() - 5;
  i32 y = x + 2;
  x = y + 25 - 12 * 32 / 2;
  x = y % x;
  return x + 23;
}

extern void putchar(i32);

void test_ffi() {
  i32 x = 65;
  putchar(65);
  putchar(65+1);
  putchar(x+2);
  putchar(10);
}

void test_deref() {
  i32[10] x;
  x[3] = 71;
  x[4] = 72;
  x[5] = 73;

  i32 *c3 = &x[3];
  i32 *c4 = &x[3] + 1;
  i32  c5 = c4[1];

  putchar(*c3);
  putchar(*c4);
  putchar(c5);
  putchar(10);
}

void test_array() {
  i32[10] x;
  x[0] = 68;
  x[1] = 68+1;
  x[2] = x[0]+2;

  putchar(x[0]);
  putchar(x[1]);
  putchar(x[2]);
  putchar(10);
}

void test_const_expr() {
  i32[2+3] x;
  x[3] = 76;
  x[4] = 77;

  putchar(x[1+2]);
  putchar(x[2+2]);
  putchar(10);

  //i32 y = 20;
  //i32[y] z;
  //z[10] = 78;
  //z[11] = 79;
  //putchar(z[78]);
  //putchar(z[y + 59]);
  //putchar(10);
 }


i32 to_i32(char a) {
  i32 x;
  llvm {
    $x = sext $a to i32
  }
  return x;
}

void test_string() {
  char* str = "Guten Tag World!";
  putchar(to_i32(*str));

  char* str1 = str+1;
  putchar(to_i32(*str1));

  putchar(to_i32(str[2]));

  //putchar(to_i32("Hello World!"[3]));

  putchar(10);
}

void test_float() {
  f32 x = 1;
  f32 y = 10.1;
  f32 z = x+y;
  printf("%.2f+%.2f=%.2f\n", x, y, z);
}

void test_math() {
}

import "breakout.gg";

i32 main() {
  test_functions();
  i32 retval = test_i32();
  test_ffi();
  test_array();
  test_deref();
  test_string();
  test_printf();
  test_struct();
  test_const_expr();
  test_float();
  test_if();
  test_strcmp();
  test_goto();
  test_while();
  return retval;
}



// end of line comments
// functions definition
// integer literal (i32)
// return statements
// compiling
// linking
// void return statements
// function call expression
// llvm type definition
// i32 type
// binary expressions
// unary expressions
// post op expression
// global constant definition
// local variable definition
// assigement statement
// function parameters
// opererator definition
// inline llvm
// import statement
// foreign function declaration
// link libc
// putchar
// array type
// array assignment
// array dereference
// pointer type
// string literals
// char* type
// array -> pointer auto conversion
// pointer arithmatic
// pointer deref w/ array syntax
// variable function arguments
// properly handle \n in string literals
// printf 
// struct definition
// struct field dereference
// const expression in array declaration
// pass/return >64 bit structure type by reference
// const expr that return structure types (const expr that return functions?)
// float literals
// paren expressions
// if statement
// goto statement
// bool type
// link sdl equivalent
// while statement

///////////////////////////////////////
// revisit error messages
// better llvm error messages
// memory mgmt
// const varaibles in array declaration
// run directive enviroments
// character literals
// undefined initialization
// array initialization
// for statement
// empty structs (like forward declare for FFI)
// global variables 

// data array?
// game jam

// string type
// char type
// global variable definition
// global variable initialization
// local constant definition
// local struct definition
// local function definition

