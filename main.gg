// main.gg
// Hello comments!

llvm_type i32 { 
  i32 
}

llvm_type i8 { 
  i8
}

llvm_type f32 { 
  float
}

f32 add_f32(f32 a, f32 b) {
  f32 x;
  llvm {
    $x = fadd $a $b
  }
  return x;
}

i32 add_i32(i32 a, i32 b) {
  i32 x;
  llvm {
    $x = add $a $b
  }
  return x;
}


i8 add_i8(i8 a, i8 b) {
  i8 x;
  llvm {
    $x = add $a $b
  }
  return x;
}

i8 sub_i8(i8 a, i8 b) {
  i8 x;
  llvm {
    $x = sub $a $b
  }
  return x;
}

struct Vec2 {
  f32 x;
  f32 y;
}

//other type literals (suffixess)
//structs
//pass by val/ref, return by val/ref
//casting 
//operator overloading
//multiple files 
//prelude
//error messages
//function overloading
//out of order declaration
//type inference
//slices
//templates
//std lib
//reflection
//case statement
//enums
//full llvm parsing
//if statement
//for statement
//named breaks/continue
//scoped functions/types
//capture
//vector types
//perf
//vstudio integration
//better linker integration
//pre-main
//global constants
//constexpr

extern i32 putchar(i32 c);
extern i32 puts(i8* s);

i32 b;

i32 main() {
  f32 fl = 5.0;
  b += 5;
  i32 x = add_i32(65, b);
  i8 *str = "Hello";
  puts(str);
  return 1;
}




